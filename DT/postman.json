{
	"info": {
		"_postman_id": "30beb07f-7f4d-4806-aa89-419fcda491eb",
		"name": "REST API basics: CRUD, test & variable",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44120410",
		"_collection_link": "https://digitaltwin-4854.postman.co/workspace/DigitalTwin-Workspace~a2ec5567-e477-4c66-8fc9-0636627f39f7/collection/44120410-30beb07f-7f4d-4806-aa89-419fcda491eb?action=share&source=collection_link&creator=44120410"
	},
	"item": [
		{
			"name": "Create_policy",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ditto",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ditto",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"entries\": {\r\n    \"owner\": {\r\n      \"subjects\": {\r\n        \"nginx:ditto\": {\r\n          \"type\": \"nginx basic auth user\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"thing:/\": { \"grant\": [\"READ\", \"WRITE\"], \"revoke\": [] },\r\n        \"policy:/\": { \"grant\": [\"READ\", \"WRITE\"], \"revoke\": [] },\r\n        \"message:/\": { \"grant\": [\"READ\", \"WRITE\"], \"revoke\": [] }\r\n      }\r\n    }\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/2/policies/agriculture:policy",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"2",
						"policies",
						"agriculture:policy"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_Thing",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ditto",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ditto",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"policyId\": \"agriculture:policy\",\r\n  \"attributes\": {\r\n    \"name\": \"CropTwin\",\r\n    \"type\": \"crop-recommendation\"\r\n  },\r\n  \"features\": {\r\n    \"soil_nutrients\": {\r\n      \"properties\": {\r\n        \"value\": {\r\n          \"N\": 90,\r\n          \"P\": 40,\r\n          \"K\": 40\r\n        }\r\n      }\r\n    },\r\n    \"environmental_conditions\": {\r\n      \"properties\": {\r\n        \"value\": {\r\n          \"temperature\": 22.5,\r\n          \"humidity\": 75.0,\r\n          \"ph\": 6.5,\r\n          \"rainfall\": 180.0\r\n        }\r\n      }\r\n    },\r\n    \"recommendation\": {\r\n      \"properties\": {\r\n        \"value\": {\r\n          \"recommended_crop\": \"\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/2/things/agriculture:CropTwin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"2",
						"things",
						"agriculture:CropTwin"
					]
				}
			},
			"response": []
		},
		{
			"name": "check_thing_exist",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ditto",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ditto",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/api/2/things/agriculture:CropTwin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"2",
						"things",
						"agriculture:CropTwin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_MQTT_connection",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "foobar",
							"type": "string"
						},
						{
							"key": "username",
							"value": "devops",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"targetActorSelection\": \"/system/sharding/connection\",\r\n  \"headers\": {\r\n    \"aggregate\": false\r\n  },\r\n  \"piggybackCommand\": {\r\n    \"type\": \"connectivity.commands:createConnection\",\r\n    \"connection\": {\r\n      \"id\": \"mqtt-connection\",\r\n      \"connectionType\": \"mqtt\",\r\n      \"connectionStatus\": \"open\",\r\n      \"failoverEnabled\": true,\r\n      \"uri\": \"tcp://test.mosquitto.org:1883\",\r\n      \"sources\": [\r\n        {\r\n          \"addresses\": [\"agriculture/sensorCrop/in\"],\r\n          \"authorizationContext\": [\"nginx:ditto\"],\r\n          \"qos\": 0,\r\n          \"filters\": []\r\n        }\r\n      ],\r\n      \"targets\": [\r\n        {\r\n          \"address\": \"agriculture/sensorCrop/out\",\r\n          \"topics\": [\r\n            \"_/_/things/twin/events\",\r\n            \"_/_/things/live/messages\"\r\n          ],\r\n          \"authorizationContext\": [\"nginx:ditto\"],\r\n          \"qos\": 0\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/devops/piggyback/connectivity?timeout=30",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"devops",
						"piggyback",
						"connectivity"
					],
					"query": [
						{
							"key": "timeout",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "kafka_source_connection",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "foobar",
							"type": "string"
						},
						{
							"key": "username",
							"value": "devops",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"targetActorSelection\": \"/system/sharding/connection\",  \r\n  \"headers\": {  \r\n    \"aggregate\": false  \r\n  },  \r\n  \"piggybackCommand\": {  \r\n    \"type\": \"connectivity.commands:createConnection\",  \r\n    \"connection\": {  \r\n      \"id\": \"kafka-source-connection\",  \r\n      \"name\": \"kafka-prediction-results\",  \r\n      \"connectionType\": \"kafka\",  \r\n      \"connectionStatus\": \"open\",  \r\n      \"failoverEnabled\": true,  \r\n      \"uri\": \"tcp://kafka:9092\",  \r\n      \"sources\": [  \r\n        {  \r\n          \"addresses\": [\"crop-predictions-topic\"],  \r\n          \"consumerCount\": 1,  \r\n          \"qos\": 1,  \r\n          \"authorizationContext\": [\"ditto:inbound-auth-subject\"],  \r\n          \"enforcement\": {  \r\n            \"input\": \"{{ header:device_id }}\",  \r\n            \"filters\": [\"{{ entity:id }}\"]  \r\n          },  \r\n          \"headerMapping\": {},  \r\n          \"payloadMapping\": [\"javascript\"]  \r\n        }  \r\n      ],  \r\n      \"targets\": [],  \r\n      \"specificConfig\": {  \r\n        \"bootstrapServers\": \"kafka:9092\"  \r\n      },  \r\n      \"mappingDefinitions\": {  \r\n        \"javascript\": {  \r\n          \"mappingEngine\": \"JavaScript\",  \r\n          \"options\": {  \r\n            \"incomingScript\": \"function mapToDittoProtocolMsg(headers, textPayload, bytePayload, contentType) {\\n    if (contentType !== 'application/json') {\\n        return null;\\n    }\\n\\n    // Parse the response from Flask\\n    let response = JSON.parse(textPayload);\\n\\n    // Extract namespace and name from the topic\\n    let topicParts = headers['topic'].split('/');\\n    let namespace = topicParts[0];\\n    let name = topicParts[1];\\n\\n    // Return a Ditto protocol message to update the recommendation\\n    return Ditto.buildDittoProtocolMsg(\\n        namespace,\\n        name,\\n        \\\"things\\\",\\n        \\\"twin\\\",\\n        \\\"commands\\\",\\n        \\\"modify\\\",\\n        {\\n            path: \\\"/features/recommendation/value/recommended_crop\\\",\\n            value: response.recommended_crop\\n        }\\n    );\\n}\"\r\n,  \r\n            \"outgoingScript\": \"function mapFromDittoProtocolMsg() { return null; }\",  \r\n            \"loadBytebufferJS\": \"false\",  \r\n            \"loadLongJS\": \"false\"  \r\n          }  \r\n        }  \r\n      }  \r\n    }  \r\n  }  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/devops/piggyback/connectivity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"devops",
						"piggyback",
						"connectivity"
					]
				}
			},
			"response": []
		},
		{
			"name": "kafka_target_connection",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "foobar",
							"type": "string"
						},
						{
							"key": "username",
							"value": "devops",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"targetActorSelection\": \"/system/sharding/connection\",  \r\n  \"headers\": {  \r\n    \"aggregate\": false  \r\n  },  \r\n  \"piggybackCommand\": {  \r\n    \"type\": \"connectivity.commands:createConnection\",  \r\n    \"connection\": {  \r\n      \"id\": \"kafka-target-connection\",  \r\n      \"name\": \"kafka-prediction-requests\",  \r\n      \"connectionType\": \"kafka\",  \r\n      \"connectionStatus\": \"open\",  \r\n      \"uri\": \"tcp://kafka:9092\",  \r\n      \"sources\": [],  \r\n      \"targets\": [  \r\n        {  \r\n          \"address\": \"sensor-data-in\",  \r\n          \"topics\": [  \r\n            \"_/_/things/twin/events?filter=eq(topic:action,'modified')\"  \r\n          ],  \r\n          \"authorizationContext\": [\"ditto:outbound-auth-subject\"],  \r\n          \"payloadMapping\": [\"javascript\"]  \r\n        }  \r\n      ],  \r\n      \"specificConfig\": {  \r\n        \"bootstrapServers\": \"kafka:9092\"  \r\n      },  \r\n      \"mappingDefinitions\": {  \r\n        \"javascript\": {  \r\n          \"mappingEngine\": \"JavaScript\",  \r\n          \"options\": {  \r\n            \"incomingScript\": \"function mapToDittoProtocolMsg() { return null; }\",  \r\n            \"outgoingScript\": \"function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value) {\\n    // Pass through the entire Ditto message structure\\n    let headers = dittoHeaders;\\n    let textPayload = JSON.stringify({\\n        topic: `${namespace}/${name}`,\\n        headers: dittoHeaders,\\n        path: path,\\n        value: value\\n    });\\n\\n    return Ditto.buildExternalMsg(\\n        headers,\\n        textPayload,\\n        null,\\n        'application/json'\\n    );\\n}\"\r\n,  \r\n            \"loadBytebufferJS\": \"false\",  \r\n            \"loadLongJS\": \"false\"  \r\n          }  \r\n        }  \r\n      }  \r\n    }  \r\n  }  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/devops/piggyback/connectivity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"devops",
						"piggyback",
						"connectivity"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_thing",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ditto",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ditto",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"N\": 95,  \r\n  \"P\": 45,  \r\n  \"K\": 30  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/2/things/agriculture:CropTwin/features/soil_nutrients/properties",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"2",
						"things",
						"agriculture:CropTwin",
						"features",
						"soil_nutrients",
						"properties"
					]
				}
			},
			"response": []
		},
		{
			"name": "flaskTest",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"N\": 73,\r\n    \"P\": 45,\r\n    \"K\": 21,\r\n    \"temperature\": 24.60532218,\r\n    \"humidity\": 73.58868502,\r\n    \"ph\": 6.63680322299999,\r\n    \"rainfall\": 96.59195302\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/predict",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"predict"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}
